// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package exports

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GrandCompanyTable struct {
	_tab flatbuffers.Table
}

func GetRootAsGrandCompanyTable(buf []byte, offset flatbuffers.UOffsetT) *GrandCompanyTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GrandCompanyTable{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGrandCompanyTable(buf []byte, offset flatbuffers.UOffsetT) *GrandCompanyTable {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GrandCompanyTable{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GrandCompanyTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GrandCompanyTable) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GrandCompanyTable) GrandCompanies(obj *GrandCompany, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GrandCompanyTable) GrandCompaniesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GrandCompanyTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func GrandCompanyTableAddGrandCompanies(builder *flatbuffers.Builder, grandCompanies flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(grandCompanies), 0)
}
func GrandCompanyTableStartGrandCompaniesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GrandCompanyTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type GrandCompany struct {
	_tab flatbuffers.Table
}

func GetRootAsGrandCompany(buf []byte, offset flatbuffers.UOffsetT) *GrandCompany {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GrandCompany{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsGrandCompany(buf []byte, offset flatbuffers.UOffsetT) *GrandCompany {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GrandCompany{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *GrandCompany) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GrandCompany) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GrandCompany) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GrandCompany) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *GrandCompany) NameEn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GrandCompany) NameFr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GrandCompany) NameDe() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GrandCompany) NameJa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GrandCompanyStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func GrandCompanyAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func GrandCompanyAddNameEn(builder *flatbuffers.Builder, nameEn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nameEn), 0)
}
func GrandCompanyAddNameFr(builder *flatbuffers.Builder, nameFr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nameFr), 0)
}
func GrandCompanyAddNameDe(builder *flatbuffers.Builder, nameDe flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(nameDe), 0)
}
func GrandCompanyAddNameJa(builder *flatbuffers.Builder, nameJa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(nameJa), 0)
}
func GrandCompanyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
